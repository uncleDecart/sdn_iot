openapi: 3.0.0
info:
  title: Dispatcher API
  description: HTTP API for Dispatcher service
  version: 0.0.2
paths:
  /nodes/{node_name}:
    post:
      summary: Update network node configuration
      operationId: post_node
      parameters: 
      - name: node_name
        in: path
        description: Node name
        required: true
        schema:
          type: string
          format: "s%d"
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeConfig'
      tags:
        - mininet
      responses:
        200:
          description: Successful operation
  /switch/add/{switch_name}:
    post:
      summary: Create new switch in the network
      operationId: addSwitch
      parameters: 
      - name: switch_name
        in: path
        description: Switch name
        required: true
        schema:
          type: string
          format: "s%d"

      tags:
        - mininet
      responses:
        200:
          description: Succesful operation
        403:
          description: Switch already exists
  /link/add:
    get:
      summary: Create new link between nodes
      operationId: add_link
      tags:
        - mininet
      parameters:
        - $ref: "#/components/parameters/FromSwitchId"
        - $ref: "#/components/parameters/ToSwitchId"
      responses:
        200:
          description: Succesful operation
        403:
          description: Node(s) does not exist
  /test:
    get:
      summary: test link
      operationId: test
      tags:
        - mininet
      responses:
        200:
          description: Succesful operation
        
  /nodes/{node_name}/cmd:
    post:
      summary: Run command for node specified
      operationId: do_cmd
      parameters: 
      - name: node_name
        in: path
        description: Node name
        required: true
        schema:
          type: string
          format: "s%d"
      tags:
        - mininet
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          text/plain:
            schema:
              type: string  
      responses:
        200:
          description: Succesful operation
          
    
  /v1.0/topology/switches:
    get:
      summary: get all the switches
      tags:
        - ryu-topology
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Switches"
  /v1.0/topology/switches/{dpid}:
    get:
      summary: get specified switch
      tags:
        - ryu-topology
      parameters: 
      - name: dpid
        in: path
        description: Node name
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Switch"
  /v1.0/topology/links:
    get:
      summary: get all the links
      tags:
        - ryu-topology
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Links"
#  /v1.0/topology/hosts:
#    get:
#      summary: get all the hosts
#      tags:
#        - ryu-topology
#      responses:
#        200:
#          description: Succesful operation
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Hosts"
#  /v1.0/topology/hosts/{dpid}:
#    get:
#      summary: get the hosts of a switch
#      tags:
#        - ryu-topology
#      parameters: 
#      - name: dpid
#        in: path
#        description: Node name
#        required: true
#        schema:
#          type: integer
#      responses:
#        200:
#          description: Succesful operation
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Host"
          
components:
  parameters:
    FromSwitchId:
      in: query
      name: from_switch
      schema:
        type: string
      required: true
      
    ToSwitchId:
      in: query
      name: to_switch
      schema:
        type: string
      required: true

    NodeName:
      in: path
      name: node_name
      schema:
        type: string
      required: true


    SourceType:
      in: query
      name: source
      schema:
        type: string
        enum: [virtual, real]
      required: true
      description: >
         * `virtual` - for emulator info
         * `real` - for real devices' info
  responses:
    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    Switches:
      type: array
      items:
        $ref: "#/components/schemas/Switch"
    Switch:
      type: object
      properties:
        ports:
          type: array
          items:
            $ref: "#/components/schemas/Port"
        dpid:
          type: string
    Port:
      type: object
      required:
        - hw_addr
        - name
        - port_no
        - dpid
      properties:
        hw_addr:
          type: string
        name:
          type: string
        port_no:
          type: string
        dpid:
          type: string
    
    Links:
      type: array
      items:
        $ref: "#/components/schemas/Link"
    Link:
      type: object
      properties:
        src:
          $ref: "#/components/schemas/Port"
        dst:
          $ref: "#/components/schemas/Port"

    NodeConfig:
      type: object
      required:
        - params
      properties:
        params:
          $ref: "#/components/schemas/NodeParameter"
    NodeParameter:
      type: object
      properties:
        delay:
          type: string
          format: "%dms"
        bw:
          type: integer
    ErrorResponse:
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
