openapi: 3.0.0
info:
  title: Dispatcher API
  description: HTTP API for Dispatcher service
  version: 0.0.2
paths:
  /nodes/{node_name}:
    post:
      summary: Update network node configuration
      operationId: post_node
      parameters: 
      - name: node_name
        in: path
        description: Node name
        required: true
        schema:
          type: string
          format: "s%d"
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeConfig'
      tags:
        - mininet
      responses:
        200:
          description: Successful operation
  /switch/{switch_name}:
    post:
      summary: Create new switch in the network
      operationId: addSwitch
      parameters: 
      - name: switch_name
        in: path
        description: Switch name
        required: true
        schema:
          type: string
          format: "s%d"

      tags:
        - mininet
      responses:
        200:
          description: Succesful operation
        403:
          description: Switch already exists
    delete:
      summary: Delete  switch in the network
      operationId: deleteSwitch
      parameters: 
      - name: switch_name
        in: path
        description: Switch name
        required: true
        schema:
          type: string
          format: "s%d"

      tags:
        - mininet
      responses:
        200:
          description: Succesful operation
        403:
          description: Switch does not exist
  /link/:
    post:
      summary: Create new link between nodes
      operationId: add_link
      tags:
        - mininet
      parameters:
        - $ref: "#/components/parameters/FromSwitchId"
        - $ref: "#/components/parameters/ToSwitchId"
      responses:
        200:
          description: Succesful operation
        403:
          description: Node(s) does not exist
  /test:
    get:
      summary: test link
      operationId: test
      tags:
        - mininet
      responses:
        200:
          description: Succesful operation
        
  /nodes/{node_name}/cmd:
    post:
      summary: Run command for node specified
      operationId: do_cmd
      parameters: 
      - name: node_name
        in: path
        description: Node name
        required: true
        schema:
          type: string
          format: "s%d"
      tags:
        - mininet
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          text/plain:
            schema:
              type: string  
      responses:
        200:
          description: Succesful operation
          
    
  /v1.0/topology/switches:
    get:
      summary: get all the switches
      tags:
        - ryu-topology
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Switches"
  /v1.0/topology/switches/{dpid}:
    get:
      summary: get specified switch
      tags:
        - ryu-topology
      parameters: 
      - name: dpid
        in: path
        description: Node name
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Switch"
  /v1.0/topology/links:
    get:
      summary: get all the links
      tags:
        - ryu-topology
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Links"
#  /v1.0/topology/hosts:
#    get:
#      summary: get all the hosts
#      tags:
#        - ryu-topology
#      responses:
#        200:
#          description: Succesful operation
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Hosts"
#  /v1.0/topology/hosts/{dpid}:
#    get:
#      summary: get the hosts of a switch
#      tags:
#        - ryu-topology
#      parameters: 
#      - name: dpid
#        in: path
#        description: Node name
#        required: true
#        schema:
#          type: integer
#      responses:
#        200:
#          description: Succesful operation
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Host"


  /stats/switches:
    get:
      summary: get the list of all the switches
      tags:
        - ryu-ofctl
      responses:
        200:
          description: Succesful operation
          content:
            raw:
              schema:
                type: string
                format: "[%d, ...]"
  /stats/desc/{dpid}:
    get:
      summary: get the desc stats of the switch
      tags:
        - ryu-ofctl
      parameters: 
      - name: dpid
        in: path
        description: Node name
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DescStat"

  /stats/flowdesc/{dpid}:
    get:
      summary: get flows desc stats of the switch
      tags:
        - ryu-ofctl
      parameters: 
      - name: dpid
        in: path
        description: Node name
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowdescStat"
  /stats/flow/{dpid}:
    get:
      summary: get flows stats of the switch
      tags:
        - ryu-ofctl
      parameters: 
      - name: dpid
        in: path
        description: Node name
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowdescStat"
    
  /stats/aggregateflow/{dpid}:
    get:
      summary: get flows stats of the switch
      tags:
        - ryu-ofctl
      parameters: 
      - name: dpid
        in: path
        description: Node name
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AggregatedFlows"
  /stats/table/{dpid}:
    get:
      summary: get flows stats of the switch
      tags:
        - ryu-ofctl
      parameters: 
      - name: dpid
        in: path
        description: Node name
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tables"
#  /stats/tablefeatures/{dpid}:
#    get:
#      summary: get flows stats of the switch
#      tags:
#        - ryu-ofctl
#      parameters: 
#      - name: dpid
#        in: path
#        description: Node name
#        required: true
#        schema:
#          type: integer
#      responses:
#        200:
#          description: Succesful operation
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Tables"
  
  /stats/port/{dpid}:
    get:
      summary: get ports stats of the switch
      tags:
        - ryu-ofctl
      parameters: 
      - name: dpid
        in: path
        description: Node name
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PortsStat"

  /stats/queue/{dpid}:
    get:
      summary: get queues stats of the switch
      description: >-
       Note Specification of port number and queue id are optional
       If you want to omitting the port number and setting the queue id,
       please specify the keyword "ALL" to the port number
       e.g. GET /stats/queue/1/ALL/1.
      tags:
        - ryu-ofctl
      parameters: 
      - name: dpid
        in: path
        description: Node name
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Succesful operation
          content:
            application/json:
              schema:
              # IDK WHAT IS GONNA BE HERE!
                $ref: "#/components/schemas/PortsStat"

# Note: Specification of port number is optional

  

# get flows desc stats of the switch filtered by the fields
# POST /stats/flowdesc/<dpid>
# get flows stats of the switch filtered by the fields
# POST /stats/flow/<dpid>
# get aggregate flows stats of the switch filtered by the fields
# POST /stats/aggregateflow/<dpid>


# get queues config stats of the switch
# GET /stats/queueconfig/<dpid>[/<port>]
# Note: Specification of port number is optional
#
# get queues desc stats of the switch
# GET /stats/queuedesc/<dpid>[/<port>[/<queue_id>]]
# Note: Specification of port number and queue id are optional
#       If you want to omitting the port number and setting the queue id,
#       please specify the keyword "ALL" to the port number
#       e.g. GET /stats/queuedesc/1/ALL/1
#
# get meter features stats of the switch
# GET /stats/meterfeatures/<dpid>
#
# get meter config stats of the switch
# GET /stats/meterconfig/<dpid>[/<meter_id>]
# Note: Specification of meter id is optional
#
# get meter desc stats of the switch
# GET /stats/meterdesc/<dpid>[/<meter_id>]
# Note: Specification of meter id is optional
#
# get meters stats of the switch
# GET /stats/meter/<dpid>[/<meter_id>]
# Note: Specification of meter id is optional
#
# get group features stats of the switch
# GET /stats/groupfeatures/<dpid>
#
# get groups desc stats of the switch
# GET /stats/groupdesc/<dpid>[/<group_id>]
# Note: Specification of group id is optional (OpenFlow 1.5 or later)
#
# get groups stats of the switch
# GET /stats/group/<dpid>[/<group_id>]
# Note: Specification of group id is optional
#
# get ports description of the switch
# GET /stats/portdesc/<dpid>[/<port_no>]
# Note: Specification of port number is optional (OpenFlow 1.5 or later)

# Update the switch stats
#
# add a flow entry
# POST /stats/flowentry/add
#
# modify all matching flow entries
# POST /stats/flowentry/modify
#
# modify flow entry strictly matching wildcards and priority
# POST /stats/flowentry/modify_strict
#
# delete all matching flow entries
# POST /stats/flowentry/delete
#
# delete flow entry strictly matching wildcards and priority
# POST /stats/flowentry/delete_strict
#
# delete all flow entries of the switch
# DELETE /stats/flowentry/clear/<dpid>
#
# add a meter entry
# POST /stats/meterentry/add
#
# modify a meter entry
# POST /stats/meterentry/modify
#
# delete a meter entry
# POST /stats/meterentry/delete
#
# add a group entry
# POST /stats/groupentry/add
#
# modify a group entry
# POST /stats/groupentry/modify
#
# delete a group entry
# POST /stats/groupentry/delete
#
# modify behavior of the physical port
# POST /stats/portdesc/modify
#
# modify role of controller
# POST /stats/role
#
#
# send a experimeter message
# POST /stats/experimenter/<dpid>


          
components:
  parameters:
    FromSwitchId:
      in: query
      name: from_switch
      schema:
        type: string
      required: true
      
    ToSwitchId:
      in: query
      name: to_switch
      schema:
        type: string
      required: true

    NodeName:
      in: path
      name: node_name
      schema:
        type: string
      required: true


    SourceType:
      in: query
      name: source
      schema:
        type: string
        enum: [virtual, real]
      required: true
      description: >
         * `virtual` - for emulator info
         * `real` - for real devices' info
  responses:
    Error:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  schemas:
    Switches:
      type: array
      items:
        $ref: "#/components/schemas/Switch"
    Switch:
      type: object
      properties:
        ports:
          type: array
          items:
            $ref: "#/components/schemas/Port"
        dpid:
          type: string
    Port:
      type: object
      required:
        - hw_addr
        - name
        - port_no
        - dpid
      properties:
        hw_addr:
          type: string
        name:
          type: string
        port_no:
          type: string
        dpid:
          type: string
    
    Links:
      type: array
      items:
        $ref: "#/components/schemas/Link"
    Link:
      type: object
      required: 
        - src
        - dst
      properties:
        src:
          $ref: "#/components/schemas/Port"
        dst:
          $ref: "#/components/schemas/Port"
    DescStat:
      type: object
      required:
        - dpid
      properties:
        dpid:
          type: string
      additionalProperties:
        type: object
        required:
          - dp_desc
          - sw_desc
          - hw_desc
          - serial_num
          - mfr_desc
        properties:
          dp_desc:
            type: string
            example: "None"
          sw_desc:
            type: string
            example: "2.5.2"
          hw_desc:
            type: string
            example: "Open vSwitch"
          serial_num:
            type: string
            example: "None"
          mfr_desc:
            type: string
            example: "Nicira, Inc."
    FlowdescStat:
      type: object
      required:
        - dpid
      properties:
        dpid:
          type: string
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/FlowInfo"
    FlowInfo:
      type: object
      properties:
        actions:
          type: array
          items:
            type: string
            example: 'OUTPUT:CONTROLLER'
        idle_timeout: 
          type: integer
        cookie:
          type: integer
        packet_count:
          type: integer
        hard_timeout:
          type: integer
        byte_count:
          type: integer
        duration_sec:
          type: integer
        duration_nsec:
          type: integer
        priority:
          type: integer
        length:
          type: integer
        flags:
          type: integer
        table_id:
          type: integer
        match:
          type: object
          required:
            - dl_type
            - dl_dst
          properties:
            dl_type: 
              type: integer
            dl_dst: 
              type: string
              example: '01:80:c2:00:00:0e'

    AggregatedFlows:
      required:
        - dpid
      properties:
        dpid:
          type: string
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/AggregatedFlow"
    AggregatedFlow:
      type: object
      required:
        - packet_count
        - byte_count
        - flow_count
      properties:
        packet_count:
          type: integer
        byte_count:
          type: integer
        flow_count:
          type: integer
    
    Tables:
      required:
        - dpid
      properties:
        dpid:
          type: string
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/Table"
    Table:
      type: object
      properties:
        matched_count: 
          type: integer
        lookup_count:
          type: integer
        table_id:
          type: integer
        active_count:
          type: integer
    PortsStat:
      type: array
      items:
        $ref: "#/components/schemas/PortStat"
    PortStat:
      required:
        - port_id
      properties:
        port_id:
          type: string
      additionalProperties:
        type: object
        properties:
          tx_dropped:
            type: integer
          rx_packets:
            type: integer
          rx_crc_err:
            type: integer
          tx_bytes:
            type: integer
          rx_dropped:
            type: integer
          port_no:
            type: integer
          rx_over_err:
            type: integer
          rx_frame_err:
            type: integer
          rx_bytes:
            type: integer
          tx_errors:
            type: integer
          duration_nsec:
            type: integer
          collisions:
            type: integer
          duration_sec:
            type: integer
          rx_errors:
            type: integer
          tx_packets:
            type: integer
    NodeConfig:
      type: object
      required:
        - params
      properties:
        params:
          $ref: "#/components/schemas/NodeParameter"
    NodeParameter:
      type: object
      properties:
        delay:
          type: string
          format: "%dms"
        bw:
          type: integer
    ErrorResponse:
      required:
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
